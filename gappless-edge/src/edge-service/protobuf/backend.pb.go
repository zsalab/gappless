// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	Id
	Book
	Empty
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Id) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Book struct {
	Id       int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	NrOfPage int32  `protobuf:"varint,3,opt,name=nrOfPage" json:"nrOfPage,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Book) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetNrOfPage() int32 {
	if m != nil {
		return m.NrOfPage
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Id)(nil), "Id")
	proto.RegisterType((*Book)(nil), "Book")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BookService service

type BookServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BookService_ListClient, error)
	Create(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Book, error)
	Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error)
	Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error)
}

type bookServiceClient struct {
	cc *grpc.ClientConn
}

func NewBookServiceClient(cc *grpc.ClientConn) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (BookService_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookService_serviceDesc.Streams[0], c.cc, "/BookService/list", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_ListClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type bookServiceListClient struct {
	grpc.ClientStream
}

func (x *bookServiceListClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookServiceClient) Create(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/BookService/create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Read(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/BookService/read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Update(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/BookService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) Delete(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/BookService/delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookService service

type BookServiceServer interface {
	List(*Empty, BookService_ListServer) error
	Create(context.Context, *Book) (*Book, error)
	Read(context.Context, *Id) (*Book, error)
	Update(context.Context, *Book) (*Book, error)
	Delete(context.Context, *Id) (*Empty, error)
}

func RegisterBookServiceServer(s *grpc.Server, srv BookServiceServer) {
	s.RegisterService(&_BookService_serviceDesc, srv)
}

func _BookService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).List(m, &bookServiceListServer{stream})
}

type BookService_ListServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type bookServiceListServer struct {
	grpc.ServerStream
}

func (x *bookServiceListServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _BookService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Create(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Read(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Update(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BookService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).Delete(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _BookService_Create_Handler,
		},
		{
			MethodName: "read",
			Handler:    _BookService_Read_Handler,
		},
		{
			MethodName: "update",
			Handler:    _BookService_Update_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _BookService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "list",
			Handler:       _BookService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcb, 0x4e, 0xc3, 0x30,
	0x10, 0x45, 0xeb, 0x3c, 0x4c, 0x19, 0x1e, 0x0b, 0x2b, 0x08, 0xd3, 0x55, 0xe4, 0x55, 0x56, 0x06,
	0xc1, 0x1f, 0x44, 0x42, 0xa2, 0x2b, 0xaa, 0xb0, 0x63, 0xe7, 0xc4, 0xd3, 0xca, 0x6a, 0x5a, 0x5b,
	0x8e, 0x8b, 0xc4, 0x37, 0xf0, 0xd3, 0x28, 0x35, 0x04, 0x09, 0x75, 0xe7, 0x7b, 0x8e, 0x67, 0x46,
	0xba, 0x70, 0xd5, 0xaa, 0x6e, 0x8b, 0x7b, 0x2d, 0x9d, 0xb7, 0xc1, 0x8a, 0x02, 0x92, 0xa5, 0x66,
	0xd7, 0x90, 0x18, 0xcd, 0x49, 0x49, 0xaa, 0xb4, 0x49, 0x8c, 0x16, 0x2f, 0x90, 0xd5, 0xd6, 0x6e,
	0xff, 0x73, 0x56, 0x40, 0x1e, 0x4c, 0xe8, 0x91, 0x27, 0x25, 0xa9, 0xce, 0x9b, 0x18, 0xd8, 0x02,
	0xe6, 0x7b, 0xff, 0xba, 0x5e, 0xa9, 0x0d, 0xf2, 0xb4, 0x24, 0x55, 0xde, 0x4c, 0x59, 0x9c, 0x41,
	0xfe, 0xbc, 0x73, 0xe1, 0xf3, 0xf1, 0x8b, 0xc0, 0xc5, 0xb8, 0xf3, 0x0d, 0xfd, 0x87, 0xe9, 0x90,
	0xdd, 0x41, 0xd6, 0x9b, 0x21, 0x30, 0x2a, 0x8f, 0x7e, 0x91, 0xcb, 0xd1, 0x8a, 0xd9, 0x03, 0x61,
	0x1c, 0x68, 0xe7, 0x51, 0x05, 0x64, 0x11, 0x4e, 0x8e, 0x15, 0x90, 0x79, 0x54, 0x9a, 0xa5, 0x72,
	0xa9, 0xff, 0x28, 0x07, 0x7a, 0x70, 0xfa, 0xd4, 0xff, 0x5b, 0xa0, 0x1a, 0x7b, 0x0c, 0x18, 0x27,
	0x7e, 0x6e, 0x89, 0x59, 0x7d, 0x0f, 0x37, 0x9d, 0xdd, 0xc9, 0x8d, 0x72, 0xae, 0xc7, 0x61, 0x88,
	0x65, 0xb4, 0x87, 0x75, 0x7d, 0x59, 0xc7, 0x7a, 0x56, 0x23, 0x78, 0x9f, 0xff, 0xf2, 0x96, 0x1e,
	0x5f, 0x4f, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x22, 0xc9, 0xcb, 0x18, 0x3f, 0x01, 0x00, 0x00,
}
